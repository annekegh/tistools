#!/usr/bin/env python

"""script to plot histograms with/without the correction factor xi
that is relevant for [0-'] ensemble

AG, June 2, 2020"""

import argparse
from tistools import read_inputfile
from tistools import create_distrib
from tistools import set_flags_ACC_REJ
import os
import glob

ACCFLAGS,REJFLAGS = set_flags_ACC_REJ() # Hard-coded rejection flags found in output files

if __name__ == '__main__':

    parser = argparse.ArgumentParser(description='histograms with/without xi')
    parser.add_argument("-i",dest="inputfile",default="./retis.rst",
        help="inputfile is file retis.rst or out.rst, where also the 000/, 001/... folders are stored",
        )
    parser.add_argument("-o",dest="outputfile",default="hist",
        help="outputfile is e.g. hist, which will create files hist.png and hist.01.png",
        )
    parser.add_argument("--pdf",dest="do_pdf",default=False, action = "store_true",
        help = "when chosen, the figures will be stored not only as png but also as pdf")

    #parser.add_argument("--dt",dest="dt",default="1.",
    #    type=float,
    #    help = "time between stored order parameters")
    parser.add_argument("--dlambda",dest="dlambda",default="0.01",
        type=float,
        help = "width of bins in order parameter (lambda) histogram")
    parser.add_argument("--dlambda-conc",dest="dlambda_conc",default=None,
        type=float,
        help = "width of bins in histogram of [0-'] used for concentration estimation")
    parser.add_argument("--lmin",dest="lmin",default=None,
        type=float,
        help = "left of the order parameter histogram")
    parser.add_argument("--lmax",dest="lmax",default=None,
        type=float,
        help = "right of the order parameter histogram")
    parser.add_argument("--ymin",dest="ymin",default=None,
        type=float,
        help = "lower limit on the y-axis")
    parser.add_argument("--ymax",dest="ymax",default=None,
        type=float,
        help = "upper limit on the y-axis")

    parser.add_argument("--index",dest="op_index",nargs='*',default=[0],
        type=int,
        help = "selection of order parameters (op). E.g. 0 (default) is the first op; 0 1 2 are the first three op's.")
    parser.add_argument("--weight",dest="op_weight",nargs='*',default=None,
        type=float,
        help = "weight of each selected order parameters (op) in the histogram")
    parser.add_argument("--abs",dest="do_abs",default=False, action = "store_true",
            help = "operation on op before histogramming: take absolute value")
    # maybe implement later with choices=['abs','sum'] or so

    parser.add_argument("--time",dest="do_time",default=False, action = "store_true",
        help = "when chosen, the time spent per length will be plotted instead of the histogram")
    parser.add_argument("--dens",dest="do_density",default=False, action = "store_true",
        help = "when chosen, the probability density will be plotted instead of the histogram")



    args = parser.parse_args()

    indir, filename = os.path.split(args.inputfile)
    if len(indir) == 0: indir = "./"
    print("indir:",indir)
    print("filename:",filename)
    #args_dict = vars(parser.parse_args())

    print("folders")
    folders = glob.glob(indir+"/0[0-9][0-9]")
    folders = sorted(folders)
    #folders = [fol[-3:] for fol in folders]
    for fol in folders:
        print(fol)
    assert len(folders)>0

    interfaces,zero_left,timestep = read_inputfile(args.inputfile)
    #assert len(interfaces) == len(folders)
    print("zero_left (can be None):",zero_left)
    if zero_left is not None:
        interfaces += [zero_left]
    print("interfaces")
    print(interfaces)
    print("timestep")
    print(timestep)
    # Use this timestep as "dt"

    # when dlambda is not defined for the concentration:
    # take the same dlambda for the concentration as for the histogram
    if args.dlambda_conc is None:
        args.dlambda_conc = args.dlambda

    # verify dimensions of selected ops and their weights
    if args.op_weight is None:
        args.op_weight = [1 for i in range(len(args.op_index))]
    assert len(args.op_index) == len(args.op_weight)


    # do_time and do_density cannot be True simultaneously
    if args.do_time and args.do_density:
        raise ValueError("--time and --dens cannot be asked for simultaneously")

    create_distrib(folders,interfaces,args.outputfile,args.do_pdf,
          timestep, args.dlambda, args.lmin, args.lmax,
          args.ymin, args.ymax,
          args.dlambda_conc,
          args.op_index, args.op_weight, args.do_abs,
          args.do_time, args.do_density,)

