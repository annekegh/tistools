#!/usr/bin/env python                                                                              
from tistools.wholemake_scripts import read_chunk_paths, execute_command
import argparse
import os
import glob
import subprocess

# Makes a list of gromacs trajectories whole. 
# This script is called by a master program, that spawns p of these processes 


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Subsampling a list of trajectories, one by one.')
    parser.add_argument("-f", dest="chunk_fn", default=None,
            help="chunk_fn is the filename where the trajectories to be subsampled are saved.")
    parser.add_argument("-c", dest="cid", default=None,
            help="chunk id, integer 0<cid<procs_used")
    parser.add_argument("-n", dest="ndx_fn", default=None,
            help="file location of the index.ndx file")
    parser.add_argument("-s", dest="tpr_fn", default=None,
            help="file location of the topol.tpr file")
    parser.add_argument("-o",dest="outf",default=None,
            help="location where log will be saved")

    args = parser.parse_args()
    chunk_fn = args.chunk_fn
    cid = args.cid
    tpr_fn = args.tpr_fn
    ndx_fn = args.ndx_fn
    outf = args.outf

    print("Working on chunk: "+str(chunk_fn))
    
    # Check whether the gromacs files are correctly located
    assert os.path.isfile(tpr_fn), "TPR file not found: "+tpr_fn
    assert os.path.isfile(ndx_fn), "NDX file not found: "+ndx_fn

    # Load the trajectory paths
    traj_files = read_chunk_paths(chunk_fn)

    # Do the wholemaking
    for traj in traj_files:
        assert os.path.isfile(traj), 'You want to whole-make a non-existing trajectory: '+traj
        traj_temp = traj[:-4]+"_whole.xtc"
        cmd = ['gmx', 'trjconv', '-f', traj, '-s', tpr_fn, '-n', ndx_fn, '-pbc', 'whole', '-o', traj_temp]
        inputs=b'0\n'
        return_code = execute_command(cmd,inputs=inputs,fn=outf+"/"+cid)
        
        if return_code is not None and return_code == 0:
            print("Done subsampling %s", traj)
            assert os.path.isfile(traj)
            assert os.path.isfile(traj_temp)
            sizeratio = os.path.getsize(traj)/os.path.getsize(traj_temp)
            
            if ((sizeratio < 1.1) and (sizeratio > 0.9)):
                os.remove(traj)
                os.rename(traj_temp,traj)
            else:
                print("WE DID NOT REMOVE AND RENAME ORIGINAL FILE, SIZERATIO TOO SMALL: "+str(sizeratio))
        else:
            RuntimeError("You should not see me, something went wrong with gmx trjconv, abort deleting files.")
